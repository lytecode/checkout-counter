{"version":3,"sources":["components/navBar.js","components/counter.js","components/counters.js","App.js","serviceWorker.js","index.js"],"names":["whiteText","color","NavBar","_ref","totalCounters","react_default","a","createElement","className","style","href","Counter","_this","this","getBadgeColor","formatValue","onClick","props","onIncrement","counter","onDecrement","onDelete","id","value","Component","Counters","onReset","counters","map","components_counter","key","App","state","handleReset","setState","handleIncrement","Object","toConsumableArray","index","indexOf","checkDecrease","c","i","handleDecrement","handleDelete","counterId","filter","Fragment","navBar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba25142c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst NavBar = ({ totalCounters }) => {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-dark\">\r\n      <a className=\"navbar-brand\" style={whiteText} href=\"#/\">\r\n        Items\r\n        <span className=\"badge badge-pill badge-secondary\">\r\n          {totalCounters}\r\n        </span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\nconst whiteText = {\r\n  color: \"#fff\"\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span className={this.getBadgeColor()}>{this.formatValue()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-success btn-sm m-2\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDecrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm m-2\"\r\n        >\r\n          Decrease\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeColor() {\r\n    let classes = \"badge m-2 badge-\";\r\n    return (classes += this.props.counter.value === 0 ? \"warning\" : \"primary\");\r\n  }\r\n\r\n  formatValue() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nconst Counters = ({\r\n  onReset,\r\n  counters,\r\n  onIncrement,\r\n  onDecrement,\r\n  onDelete\r\n}) => {\r\n  return (\r\n    <div>\r\n      <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n        Reset\r\n      </button>\r\n      {counters.map(counter => (\r\n        <Counter\r\n          key={counter.id}\r\n          counter={counter}\r\n          onIncrement={onIncrement}\r\n          onDecrement={onDecrement}\r\n          onDelete={onDelete}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navBar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(counter => {\n      counter.value = 0;\n      return counter;\n    });\n\n    this.setState({ counters });\n  };\n\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  checkDecrease = (c, i) => {\n    return c[i].value <= 0 ? 0 : c[i].value--;\n  };\n\n  handleDecrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    this.checkDecrease(counters, index);\n    this.setState({ counters });\n  };\n\n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(\n      counter => counter.id !== counterId\n    );\n\n    this.setState({ counters });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={\n            this.state.counters.filter(counter => counter.value > 0).length\n          }\n        />\n        <main className=\"container\">\n          <Counters\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDecrement={this.handleDecrement}\n            onDelete={this.handleDelete}\n            counters={this.state.counters}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}